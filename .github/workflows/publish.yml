name: Publish to PyPI

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty to use current version)'
        required: false
        type: string

jobs:
  publish:
    runs-on: ubuntu-latest
    environment: release
    permissions:
      id-token: write
      contents: read

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v3

    - name: Install dependencies
      run: uv sync

    - name: Update version if specified
      if: ${{ github.event.inputs.version != '' }}
      run: |
        # Update version in pyproject.toml
        sed -i 's/version = "[^"]*"/version = "${{ github.event.inputs.version }}"/' pyproject.toml
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
        git add pyproject.toml
        git commit -m "Bump version to ${{ github.event.inputs.version }}"
        git tag "v${{ github.event.inputs.version }}"
        git push origin main
        git push origin "v${{ github.event.inputs.version }}"

    - name: Run linting and tests
      run: |
        uv run ruff check .
        uv run ruff format --check .
        uv run python -m pytest tests/ -n auto -v

    - name: Build package
      run: |
        uv build

    - name: Publish to PyPI
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_PUBLISH_TOKEN }}
      run: |
        uv add twine --dev
        uv run twine upload dist/*

    - name: Create GitHub Release
      if: ${{ github.event.inputs.version != '' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create "v${{ github.event.inputs.version }}" \
          --title "Release v${{ github.event.inputs.version }}" \
          --notes "Release version ${{ github.event.inputs.version }}" \
          dist/*